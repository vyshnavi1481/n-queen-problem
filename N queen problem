public class NQueenProblem {
    final int N = 4;
 
    /* To print the solution */
    void print(int board[][])
    {		
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + board[i][j]
                                 + " ");
            System.out.println();
        }
    }
 
    /* A utility function to check if a queen can
       be placed on board[row][col] */
    boolean Safe(int board[][], int row, int col)
    {
        int i, j;
 
        /* It checks the row on left side */
        for (i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;
 
        /* It checks the upper diagonal on left side */
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;
 
        /* It checks the lower diagonal on left side */
        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;
 
        return true;
    }
 
    /* A recursive utility function to solve N
       Queen problem */
    boolean Utility(int board[][], int col)
    {
        if (col >= N)
            return true;
 
        /* place the queen in all rows one by one */
        for (int i = 0; i < N; i++) 
      {
            if (Safe(board, i, col)) 
       {
                board[i][col] = 1;
                if (Utility(board, col + 1) == true)
                    return true;
 
                /* If placing queen in board[i][col]
                   doesn't lead to a solution then
                   remove queen from board[i][col] */
                board[i][col] = 0; 
            }
        }
 
        /* If the queen cannot be placed in any row in
           this column col, then return false */
        return false;
    }
 
    /* It returns false if queens
       cannot be placed, otherwise, return true and
       prints placement of queens in the form of 1s.*/
    boolean solveNQ()
    {
        int board[][] = { { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 },
                          { 0, 0, 0, 0 } };
 
        if (Utility(board, 0) == false) {
            System.out.print("Solution does not exist");
            return false;
        }
 
        print(board);
        return true;
    }
    public static void main(String args[])
    {
       System.out.println("Name:G.vyshnavi,SAP ID:51834743");
        NQueenProblem Queen = new NQueenProblem();
        Queen.solveNQ();
    }
} 
